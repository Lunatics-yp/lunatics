# Определяем название процесса (просто отображается на странице Actions в GitHub)
name: Push to Yandex Cloud CR

# Определяем условия запуска процесса
# @see https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  # Позволяет запускать вручную из GitHub
  workflow_dispatch:

  # Позволяет запускать при push в main (и при commit и при merge)
  push:
    branches:
      - main

  # Временная тестовая сборка при PR в deploy-main (@todo после проверки удалить)
  pull_request:
    branches:
      - deploy-main

# Определяем процесс (состоит из нескольких последовательных/параллельных jobs)
jobs:
  # Но нам хватит одного
  build:
    # Для построения проекта от вас не требуется сервер или что-либо подобное,
    # GitHub выполнит построение, используя собственный runner - такую
    # общедоступную 'виртуальную машину'
    runs-on: ubuntu-latest

    # Определяем шаги процесса
    steps:
      # Запускает предварительную проверку
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Авторизация в Яндекс.Облаке (здесь ничего не меняем)
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

      # Построение образа и отправка его в Container Registry
      - name: Build, tag, and push image to Yandex Cloud Container Registry
        env:
          # Идентификатор регистра
          CR_REGISTRY: ${{ secrets.YC_CR_REGISTRY }}
          # Название репозитория (впрочем оно далее не используется)
          CR_REPOSITORY: ${{ secrets.YC_CR_REPOSITORY }}
          # Формируется уникальное название для образа (ничего не меняем)
          IMAGE_TAG: ${{ github.sha }}
          # Далее указываем все прочие нужные нам переменные среды
          CLIENT_PORT: 3000
          SERVER_PORT: 3000
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
          POSTGRES_PORT: 5432

        # Всё описание выше было лишь подготовкой
        # Тем не менее, оставшиеся шаги более не должны вызывать вопросы
        run: |
          docker compose build
          docker tag lunatics-server:latest cr.yandex/$CR_REGISTRY/lunatics-server:${{ github.sha }}
          docker push cr.yandex/$CR_REGISTRY/lunatics-server:${{ github.sha }}
