// –ò–º–ø–æ—Ä—Ç react
import {AI} from 'client/src/game/ai';
import {ChangeEventHandler, FC, useState} from 'react';
// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import {Button} from 'client/src/components/Button';
import {Footer} from 'client/src/components/Footer';
import {Header} from 'client/src/components/Header';
import {Input} from 'client/src/components/Input';
// –ò–º–ø–æ—Ä—Ç –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫
import {Shooting} from 'client/src/game/shooting';
import {SpaceGround} from 'client/src/game/spaceGround';
import {Placement} from 'client/src/game/placement';
import {
	CellStatus,
	TSpaceGroundDisplayProps,
	TShapesList,
} from 'client/src/game/typing';
// –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import {shape1, shape2, shape3, shape4} from './shapes';
import styles from './styles.module.scss';

// –í–†–ï–ú–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
// –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ canvas
const convertMapStatusToSymbol = (status: CellStatus) => {
	switch (status) {
		case CellStatus.UNKNOWN:
			return '[?]';
		case CellStatus.EMPTY:
			return '[ ]';
		case CellStatus.OCCUPIED:
			return '[‚ñí]';
		case CellStatus.MISSED:
			return '[¬∑]';
		case CellStatus.BURNING:
			return '[v]';
		case CellStatus.DESTROYED:
			return '[Œß]';
		default:
			return ' E ';
	}
};

// –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º –ª—É–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã)
const lunarModulesTypesToBePlacement: TShapesList = [
	{
		name: '–ß–µ—Ç–≤–µ—Ä–Ω–æ–π',
		shape: shape4,
		count: 1,
	},
	{
		name: '–¢—Ä–æ–π–Ω–æ–π',
		shape: shape3,
		count: 2,
	},
	{
		name: '–î–≤–æ–π–Ω–æ–π',
		shape: shape2,
		count: 3,
	},
	{
		name: '–û–¥–∏–Ω–æ—á–Ω—ã–π',
		shape: shape1,
		count: 4,
	},
];

// –í–†–ï–ú–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
// –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ "–∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –Ω–∞ canvas"
const MoonGroundDisplay: FC<TSpaceGroundDisplayProps> = (props) => {
	const {map} = props;
	let mapDisplayView = '';

	for (let x = 0; x < map.length; x++) {
		for (let y = 0; y < map[x].length; y++) {
			const mapCell = map[x][y];
			mapDisplayView += convertMapStatusToSymbol(mapCell.status);
		}
		mapDisplayView += '\n';
	}

	mapDisplayView += '\n';
	mapDisplayView += `${convertMapStatusToSymbol(CellStatus.OCCUPIED)}–õ—É–Ω–Ω—ã–π –º–æ–¥—É–ª—å, `;
	mapDisplayView += `${convertMapStatusToSymbol(CellStatus.BURNING)}–†–∞–Ω–µ–Ω, `;
	mapDisplayView += `${convertMapStatusToSymbol(CellStatus.DESTROYED)}–£–Ω–∏—á—Ç–æ–∂–µ–Ω, `;
	mapDisplayView += `${convertMapStatusToSymbol(CellStatus.MISSED)}–ü—Ä–æ–º–∞—Ö\n\n`;

	return (
		<div>
			<div dangerouslySetInnerHTML={{__html: `<pre>${mapDisplayView}</pre>`}}></div>
		</div>
	);
};

function rerenderMapFunction(){
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	const [value, setValue] = useState(0); // integer state
	// Eslint —Ä—É–≥–∞–µ—Ç—Å—è, —á—Ç–æ value –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, ts-ignore –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç
	// –ü—Ä–∏—à–ª–æ—Å—å —Ç–∞–∫–æ–π –∫–æ—Å—Ç—ã–ª—å –ø–∏—Å–∞—Ç—å.
	// eslint-disable-next-line no-constant-condition
	if(value && false){
		console.log(value);
	}
	return () => setValue(value => value + 1); // update state to force render
	// A function that increment üëÜüèª the previous state like here
	// is better than directly setting `setValue(value + 1)`
}

export const PageGameMechanicsDemonstration = () => {
	// —Å—Ç–µ–π—Ç –¥–ª—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫–∏
	// –í —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å canvas –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –±—É–¥–µ—Ç requestAnimationFrame
	// const [rerender, setRerender] = useState(0);
	// useEffect(() => {
	// 	console.log('useEffect', rerender);
	// });

	const rerenderMap = rerenderMapFunction();

	// –°—Ç–µ–π—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞
	// –í —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã —Å canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –∫–ª–∞—Å—Å–∞ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∫–∏
	const [cursorX, setCursorX] = useState(0);
	const [cursorY, setCursorY] = useState(0);

	// –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
	const [playerMoonGround] = useState(new SpaceGround({
		width: 10,
		height: 10,
	}));

	// –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª—É–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
	const [playerPlacement] = useState(new Placement(
		playerMoonGround,
		lunarModulesTypesToBePlacement,
	));

	// –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –°—Ç—Ä–µ–ª—å–±—ã –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
	const [playerShooting] = useState(new Shooting(
		playerMoonGround,
		playerPlacement.modules,
	));

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
	// const rerenderMap = () => {
	// 	console.log('rerenderMap', rerender);
	// 	setRerender(rerender+1);
	// };

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	const clearHandle = () => {
		playerPlacement.clear();
		rerenderMap();
	};

	// –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª—É–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
	const randomHandle = () => {
		playerPlacement.randomLocateAllModulesToGround();
		rerenderMap();
	};

	// –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª—É–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
	// const positionHandle = () => {
	// 	playerPlacement.locateModuleToGround(playerPlacement.getLunarModules()[0], {x:2, y:2});
	// };

	// –ö–∞–ª–ª–±–µ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ X
	const cursorXHandle: ChangeEventHandler<HTMLInputElement> = (e) => {
		const value = e.target.value;
		setCursorX(parseInt(value));
	};

	// –ö–∞–ª–ª–±–µ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ Y
	const cursorYHandle: ChangeEventHandler<HTMLInputElement> = (e) => {
		const value = e.target.value;
		setCursorY(parseInt(value));
	};

	// –ú–µ—Ç–æ–¥ –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
	const shotHandle = () => {
		const shotInfo = playerShooting.shoot({x: cursorX, y: cursorY});
		console.log(shotInfo);
		rerenderMap();
	};

	/// -------
	/// -------
	/// -------

	const [ai] = useState(new AI(playerShooting));

	const aiShootHandle = () => {
		ai.shoot();
		rerenderMap();
	};

	return (
		<>
			<div className={styles.pageGameMechanicsDemonstration}>
				<Header>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫</Header>
				<div className={styles.content}>
					pageGameMechanicsDemonstration
					<MoonGroundDisplay map={playerMoonGround.map} rerender={rerenderMap}/>
					<div className={styles.menu}>
						<Button
							text='–û—á–∏—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ'
							onClick={clearHandle}
						/>
						<Button
							text='–†–∞–Ω–¥–æ–º–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ª—É–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏'
							onClick={randomHandle}
						/>
						<div className={styles.inputsBlock}>
							<Input
								label='–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X'
								value={cursorX.toString()}
								onChange={cursorXHandle}
							/>
							<Input
								label='–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y'
								value={cursorY.toString()}
								onChange={cursorYHandle}
							/>
						</div>
						<Button
							text='–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å —Å–∞–º–æ–º—É'
							onClick={shotHandle}
						/>
						<Button
							text='–í—ã—Å—Ç—Ä–µ–ª AI'
							onClick={aiShootHandle}
						/>
					</div>
				</div>
				<Footer>–ü–æ–¥–≤–∞–ª</Footer>
			</div>
		</>
	);
};
